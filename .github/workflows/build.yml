name: Build

on:
  push:
    paths:
      - '.github/workflows/build.yml'
      - 'src/**/*'
      - 'Cargo.toml'
      - 'Cargo.lock'
  pull_request:
    paths:
      - '.github/workflows/build.yml'
      - 'src/**/*'
      - 'Cargo.toml'
      - 'Cargo.lock'

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.config.platform }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - platform: ubuntu-20.04
            target: 'x86_64-unknown-linux-gnu'
          - platform: ubuntu-20.04
            target: 'aarch64-unknown-linux-gnu'
          - platform: ubuntu-20.04
            target: 'armv7-unknown-linux-gnueabihf'

          - platform: macos-latest
            target: 'x86_64-apple-darwin'
          - platform: macos-latest
            target: 'aarch64-apple-darwin'

          - platform: windows-latest
            target: 'x86_64-pc-windows-msvc'
          - platform: windows-latest
            target: 'aarch64-pc-windows-msvc'

    steps:
      - uses: actions/checkout@v4

      - uses: actions-rust-lang/setup-rust-toolchain@v1

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./target/
          key: ${{ matrix.config.target }}-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: (Linux) ARM sources.list
        if: matrix.config.target == 'aarch64-unknown-linux-gnu' || matrix.config.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          # Add [arch=amd64] to the initial entries of the sources.list
          sudo sed -i 's/^deb /deb [arch=amd64] /' /etc/apt/sources.list
  
          echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs) main restricted" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-updates main restricted" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs) universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-updates universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs) multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-updates multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-security main restricted" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-security universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-security multiverse" | sudo tee -a /etc/apt/sources.list
  
      # ARM-linux related sources and dpkg config and such
      - name: (Linux) ARM setup
        if: matrix.config.target == 'aarch64-unknown-linux-gnu' || matrix.config.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          sudo dpkg --add-architecture arm64
          sudo dpkg --add-architecture armhf
          sudo apt-get update

      - name: (Linux) (ARMv7) Install dependencies
        if: matrix.config.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          sudo apt-get install -y \
            libssl-dev:armhf \
            gcc-arm-linux-gnueabihf
    
      - name: (Linux) (ARM64) Install dependencies
        if: matrix.config.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get install -y \
            libssl-dev:arm64 \
            gcc-aarch64-linux-gnu

      - name: Install target
        run: rustup target add ${{ matrix.config.target }}

      - name: Build
        if: matrix.config.target != 'armv7-unknown-linux-gnueabihf' && matrix.config.target != 'aarch64-unknown-linux-gnu'
        run: cargo build --release --features binary --target ${{ matrix.config.target }}

      - name: (Linux) (ARMv7) Build
        if: matrix.config.target == 'armv7-unknown-linux-gnueabihf'
        run: cargo build --release --features binary --target ${{ matrix.config.target }} --config target.armv7-unknown-linux-gnueabihf.linker=\'arm-linux-gnueabihf-gcc\'
        env:
          RUSTFLAGS: -Awarnings -L/usr/lib/arm-linux-gnueabihf
          CC: arm-linux-gnueabihf-gcc
          PKG_CONFIG_SYSROOT_DIR: /usr/
          PKG_CONFIG_PATH: /usr/lib/arm-linux-gnueabihf/pkgconfig

      - name: (Linux) (ARM64) Build
        if: matrix.config.target == 'aarch64-unknown-linux-gnu'
        run: cargo build --release --features binary --target ${{ matrix.config.target }} --config target.aarch64-unknown-linux-gnu.linker=\'aarch64-linux-gnu-gcc\'
        env:
          RUSTFLAGS: -Awarnings -L/usr/lib/aarch64-linux-gnu
          CC: aarch64-linux-gnu-gcc
          PKG_CONFIG_SYSROOT_DIR: /usr/
          PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: rsrpc-${{ matrix.config.target }}
          # Find exec based on platform
          path: target/${{ matrix.config.target }}/release/rsrpc${{ matrix.config.platform == 'windows-latest' && '.exe' || '' }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Download all artifacts from the build job
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Zip each artifact and cleanup
        run: |
          set -e
          BASE_DIR="artifacts"
            FOLDER_NAME=$(basename "$dir")
            ZIP_FILE="${FOLDER_NAME}.zip"
            echo "Zipping $dir into $ZIP_FILE..."
            zip -j -r "$ZIP_FILE" "$dir"
            echo "Deleting $dir..."
            rm -rf "$dir"
          done

      - name: Create release using all artifacts
        uses: softprops/action-gh-release@v2
        if: github.event_name != 'schedule'
        with:
          files: artifacts/**
          token: ${{ secrets.GITHUB_TOKEN }}
          # Release name is the tag name
          name: ${{ github.ref_name }} - ${{ github.sha }}
          draft: false
          generate_release_notes: true
          prerelease: false